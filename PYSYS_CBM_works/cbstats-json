#!/usr/bin/env python

import base64
import httplib
import json
import logging
import optparse
import os
import string
import sys
import time
import urllib

from metadata.visit import main as visit_main
from metadata.visit import VISIT_RETRIEVE_FUNCS, VISIT_ENTRY_FUNCS

USAGE = """./%prog [HOST[:PORT]] DIRECTORY

Collect raw JSON stats/metrics from a couchbase cluster,
placing output into DIRECTORY/YYYYMMDD-HHMMSS/*.json files.

Examples:
  ./%prog                   -- defaults to 127.0.0.1
  ./%prog 10.3.121.192
  ./%prog 10.3.121.192:8091"""

class VisitorToJSON(object):
    """Implements callbacks for metadata.visit, saving metrics/data
       to JSON files in a time-stamped subdirectory."""

    def __init__(self, host_port, user, pswd, directory):
        self.host_port = host_port
        self.user = user
        self.pswd = pswd
        self.directory = directory
        self.start = time.localtime()
        self.slow = {}
        self.fast = {}
        self.ctl = {}

    def __repr__(self):
        return ("<VisitorToJSON> host_port: %s, directory: %s" %
                (self.host_port, self.directory))

    def go(self):
        retrieve_funcs = dict(VISIT_RETRIEVE_FUNCS)
        retrieve_funcs["retrieve_data"] = self.retrieve_data

        entry_funcs = dict(VISIT_ENTRY_FUNCS)
        entry_funcs["collect_mc_stats"] = self.collect_mc_stats
        entry_funcs["collect_proxy_stats"] = self.collect_proxy_stats

        host = (self.host_port + ":8091").split(':')[0]
        port = (self.host_port + ":8091").split(':')[1]
        visit_main(host, port, "/pools/default",
                   {"fast": self.store_fast, "slow": self.store_slow},
                   {"url_before": self.url_before, "url_after": self.url_after},
                   retrieve_funcs=retrieve_funcs, entry_funcs=entry_funcs,
                   ctl=self.ctl)

        return self.ctl.get("stop", 0)

    def url_before(self, context, path):
        self.slow = {}
        self.fast = {}
        return context, path

    def url_after(self, context, path, root):
        if not self.slow and not self.fast:
            return
        d = os.path.join(self.directory, time.strftime("%Y%m%d-%H%M%S", self.start))
        if not os.path.exists(d):
            os.makedirs(d)
        p = urllib.quote_plus(path.split('?')[0])
        if self.slow:
            with open(os.path.join(d, "slow" + p + ".json"), 'w') as f:
                print >> f, json.dumps(root['run']['coll'])
        if self.fast:
            with open(os.path.join(d, "fast" + p + ".json"), 'w') as f:
                print >> f, json.dumps(self.fast)

    def store_fast(self, root, parents, data, meta, coll,
                   key, val, meta_val, meta_inf, level):
        name = '-'.join(parents + [key])
        self.fast[name] = val

    def store_slow(self, root, parents, data, meta, coll,
                   key, val, meta_val, meta_inf, level):
        name = '-'.join(parents + [key])
        self.slow[name] = val
        if type(coll) == list:
            coll.append(val)
        else:
            coll[key] = val

    def retrieve_data(self, context, path):
        err, rest_json, rest_data = rest_request_json(context['host'],
                                                      context['port'],
                                                      self.user, self.pswd, path)
        if err:
            self.ctl["stop"] = err
        return rest_data

    def collect_mc_stats(self, root, parents, data, meta, coll,
                         key, val, meta_val, meta_inf, level=0):
        logging.debug("collect_mc_stats", val)

    def collect_proxy_stats(self, root, parents, data, meta, coll,
                            key, val, meta_val, meta_inf, level=0):
        c = root['run']['coll']
        for k, v in enumerate(parents[0:-1]):
            if type(c) == list:
                c = c[int(v)]
            else:
                c = c[v]
        host = c['hostname'].replace('"', '').split(':')[0]
        logging.debug("collect_proxy_stats", host, val)


# TODO: Perhaps pull these rest_xxx() helper functions to another file.

def rest_request(host, port, user, pswd, path, method='GET', body='', reason=''):
    if reason:
        reason = "; reason: %s" % (reason)

    logging.debug("rest_request: %s@%s:%s%s%s" % (user, host, port, path, reason))

    conn = httplib.HTTPConnection(host, port)
    try:
        conn.request(method, path, body, rest_headers(user, pswd))
    except Exception, e:
        return ("error: could not access REST API: %s:%s%s" +
                "; please check source URL, username (-u) and password (-p)" +
                "; exception: %s%s") % \
                (host, port, path, e, reason), None, None

    resp = conn.getresponse()
    if resp.status in [200, 201, 202, 204, 302]:
        return None, conn, resp.read()

    conn.close()

    if resp.status == 401:
        return ("error: unable to access REST API: %s:%s%s" +
                "; please check source URL, username (-u) and password (-p)%s") % \
                (host, port, path, reason), None, None

    return ("error: unable to access REST API: %s:%s%s" +
            "; please check source URL, username (-u) and password (-p)" +
            "; response: %s%s") % \
            (host, port, path, resp.status, reason), None, None

def rest_headers(user, pswd, headers=None):
    if not headers:
        headers = {'Content-Type': 'application/json'}
    if user:
        auth = 'Basic ' + \
            string.strip(base64.encodestring(user + ':' + (pswd or '')))
        headers['Authorization'] = auth
    return headers

def rest_request_json(host, port, user, pswd, path, reason=''):
    err, conn, rest_json = rest_request(host, port, user, pswd, path,
                                        reason=reason)
    if err:
        return err, None, None
    if conn:
        conn.close()
    try:
        return None, rest_json, json.loads(rest_json)
    except ValueError, e:
        return ("error: could not decode JSON from REST API: %s:%s%s" +
                "; exception: %s" +
                "; please check URL, username (-u) and password (-p)") % \
                (host, port, path, e), None, None

def main(argv):
    p = optparse.OptionParser(usage=USAGE)
    opts, rest = p.parse_args(argv[1:])
    if len(rest) < 1:
        return "error: please provide an output DIRECTORY"
    if len(rest) > 2:
        return "error: too many parameters; please see usage/help (-h)"
    if len(rest) > 1:
        host_port = rest[0]
    else:
        host_port = "127.0.0.1:8091"
    directory = rest[-1]

    user = 'Administrator' # TODO: Get user/pswd from cmd-line.
    pswd = 'password'

    return VisitorToJSON(host_port, user, pswd, directory).go()

if __name__ == '__main__':
    sys.exit(main(sys.argv))
